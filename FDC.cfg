[gcode_macro _VGB]
variable_temp_min: 0.0
variable_temp_max: 999.9
variable_z_height_temps: {999:999}
variable_step: 0.1
variable_precision: 1
variable_enable: 1
############################ DO NOT CHANGE ANYTHING BELOW UNLESS YOU KNOW WHAT YOU ARE DOING ####################################
variable_thermistor_name: "z_thermal_adjust"
variable_last_temp: 0
gcode:
  {% if enable %}
    #take <thermistor_name> temp, load bed mesh that is closest
    #precautions - range() only takes integers
    {% set mult_min = 10**((temp_min|string)|length) %}
    {% set mult_max = 10**((temp_max|string)|length) %}
    {% set mult_step = 10**((temp_step|string)|length) %}
    {% if mult_min > mult_max %}
      {% if mult_min > mult_step %}
        {% set multiplier = mult_min %}
      {% else %}
        {% set multiplier = mult_step %}
      {% endif %}
    {% else %}
      {% if mult_max > mult_step %}
        {% set multiplier = mult_max %}
      {% else %}
        {% set multiplier = mult_step %}
      {% endif %}
    {% endif %}

    #get current temp
    {% set current_temp = printer[thermistor_name].temperature|float %}

    #find closest value to current temp
    {% set vals = {'min': 999, 'temp': 999} %}
    {% for temp in range((temp_min*multiplier)|int, ((temp_max+step)*multiplier)|int, (step*multiplier)|int) %}
      {% if ((temp/multiplier)|float-current_temp)|abs < vals.min|float %}
        {% if  vals.update({'min': ((temp/multiplier)|float-current_temp)|abs}) %} {% endif %}
        {% if  vals.update({'temp': (temp/multiplier)}) %} {% endif %}
      {% endif %}
    {% endfor %}

    #roudning current_temp to the step with precision in order to not be affected by small changes
    #this will also improve temp_coeff to not fluctuate to much
    {% set current_temp=(current_temp / step)|round(0) %}
    {% set current_temp=(current_temp * step)|round(precision) %}

    #change the mesh only if it's needed, we don't want to spam klipper with gcodes
    {% if last_temp != current_temp %}
        SET_GCODE_VARIABLE MACRO=_VGB VARIABLE=last_temp VALUE={current_temp}
        BED_MESH_PROFILE LOAD={vals.temp} #apply best match
    {% endif %}
  {% endif %}

[gcode_macro _Z_ADJUST]
variable_last_coeff: 0
gcode:
    {% set ref_temp = printer.z_thermal_adjust.z_adjust_ref_temperature %}
    {% set current_temp = printer["gcode_macro _VGB"].last_temp|float %}

    {% set total_mm= namespace(value=0) %}
    {% set temp_coeff = namespace(value=0) %}

    {% if current_temp >= printer["gcode_macro _VGB"].temp_min %}
      {% for key,item in printer["gcode_macro _VGB"].z_height_temps|dictsort if current_temp >= key %}
          {% set total_mm.value = total_mm.value + item %}
      {% endfor %}
    {% endif %}

    {% set temp_coeff.value = total_mm.value / (current_temp - ref_temp) %}
    #there is a bug in the compression of this two floats
    #coudln't for the life of me understand why, so I compare them as strings
    {% if last_coeff|string != temp_coeff.value|string %}
        SET_GCODE_VARIABLE MACRO=_Z_ADJUST VARIABLE=last_coeff VALUE={temp_coeff.value}
        SET_Z_THERMAL_ADJUST TEMP_COEFF={ temp_coeff.value }
    {% endif %}

[delayed_gcode RUN_FDC]
initial_duration: 1
gcode:
  {% if printer["gcode_macro _VGB"].temp_min|float == 0.0 or printer["gcode_macro _VGB"].temp_max|float == 999.9  %}
    { action_respond_info("FDC: Stock temperature values present! Modify the config to reflect your own values and restart!") }
  {% elif printer["gcode_macro _VGB"].z_height_temps.999 is defined and printer["gcode_macro _VGB"].z_height_temps.0 == 999 %}
    { action_respond_info("FDC: Stock z heights values present! Modify the config to reflect your own values and restart!") }
  {% else %}
    UPDATE_DELAYED_GCODE ID=RUN_FDC DURATION=7
    _VGB
    _Z_ADJUST
  {% endif %}

[gcode_macro SET_FDC]
gcode:
    #get current state if not provided by params
    {% set ENABLE = params.ENABLE|default(printer["gcode_macro _VGB"].enable)|string %}
    #input checks
    {% if ENABLE == "0" or ENABLE == "1" %}
      {% set enabled = printer["gcode_macro _VGB"].enable %} #current enable status

      {% if not enabled|int == ENABLE|int %}
        SET_GCODE_VARIABLE MACRO=_VGB VARIABLE=enable VALUE={ENABLE}
      {% endif %}
      QUERY_FDC
    {% else %}
      { action_respond_info("Invalid parameter ENABLE value '%s' - must be 0 or 1" % (ENABLE|int)) }
    {% endif %}

[gcode_macro QUERY_FDC]
gcode:
    {% set enabled = printer["gcode_macro _VGB"].enable %}
    {% set last_temp = printer["gcode_macro _VGB"].last_temp %}
    {% set current_mesh = printer.bed_mesh.profile_name %}
    {% set current_temp_coeff = printer["gcode_macro _Z_ADJUST"].last_coeff %}
    {% set current_z_adjust = printer.z_thermal_adjust.current_z_adjust %}
    { action_respond_info("FDC: \n Enabled: %s \n Last temp: %s C \n Mesh profile loaded: %s \n current temp coeff: %s \n current z adjust: %s" % (enabled, last_temp, current_mesh, current_temp_coeff, current_z_adjust)) }